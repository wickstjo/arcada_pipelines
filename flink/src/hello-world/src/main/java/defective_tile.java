/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package schemas.surface_data;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class defective_tile extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2701793541466169081L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"defective_tile\",\"namespace\":\"schemas.surface_data\",\"fields\":[{\"name\":\"timestamp\",\"type\":\"string\"},{\"name\":\"tensor_hash\",\"type\":\"string\"},{\"name\":\"tensor\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\"}}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence timestamp;
  @Deprecated public java.lang.CharSequence tensor_hash;
  @Deprecated public java.util.List<java.util.List<java.util.List<java.lang.Double>>> tensor;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public defective_tile() {}

  /**
   * All-args constructor.
   */
  public defective_tile(java.lang.CharSequence timestamp, java.lang.CharSequence tensor_hash, java.util.List<java.util.List<java.util.List<java.lang.Double>>> tensor) {
    this.timestamp = timestamp;
    this.tensor_hash = tensor_hash;
    this.tensor = tensor;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return timestamp;
    case 1: return tensor_hash;
    case 2: return tensor;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: timestamp = (java.lang.CharSequence)value$; break;
    case 1: tensor_hash = (java.lang.CharSequence)value$; break;
    case 2: tensor = (java.util.List<java.util.List<java.util.List<java.lang.Double>>>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'timestamp' field.
   */
  public java.lang.CharSequence getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'tensor_hash' field.
   */
  public java.lang.CharSequence getTensorHash() {
    return tensor_hash;
  }

  /**
   * Sets the value of the 'tensor_hash' field.
   * @param value the value to set.
   */
  public void setTensorHash(java.lang.CharSequence value) {
    this.tensor_hash = value;
  }

  /**
   * Gets the value of the 'tensor' field.
   */
  public java.util.List<java.util.List<java.util.List<java.lang.Double>>> getTensor() {
    return tensor;
  }

  /**
   * Sets the value of the 'tensor' field.
   * @param value the value to set.
   */
  public void setTensor(java.util.List<java.util.List<java.util.List<java.lang.Double>>> value) {
    this.tensor = value;
  }

  /**
   * Creates a new defective_tile RecordBuilder.
   * @return A new defective_tile RecordBuilder
   */
  public static schemas.surface_data.defective_tile.Builder newBuilder() {
    return new schemas.surface_data.defective_tile.Builder();
  }
  
  /**
   * Creates a new defective_tile RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new defective_tile RecordBuilder
   */
  public static schemas.surface_data.defective_tile.Builder newBuilder(schemas.surface_data.defective_tile.Builder other) {
    return new schemas.surface_data.defective_tile.Builder(other);
  }
  
  /**
   * Creates a new defective_tile RecordBuilder by copying an existing defective_tile instance.
   * @param other The existing instance to copy.
   * @return A new defective_tile RecordBuilder
   */
  public static schemas.surface_data.defective_tile.Builder newBuilder(schemas.surface_data.defective_tile other) {
    return new schemas.surface_data.defective_tile.Builder(other);
  }
  
  /**
   * RecordBuilder for defective_tile instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<defective_tile>
    implements org.apache.avro.data.RecordBuilder<defective_tile> {

    private java.lang.CharSequence timestamp;
    private java.lang.CharSequence tensor_hash;
    private java.util.List<java.util.List<java.util.List<java.lang.Double>>> tensor;

    /** Creates a new Builder */
    private Builder() {
      super(schemas.surface_data.defective_tile.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(schemas.surface_data.defective_tile.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tensor_hash)) {
        this.tensor_hash = data().deepCopy(fields()[1].schema(), other.tensor_hash);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tensor)) {
        this.tensor = data().deepCopy(fields()[2].schema(), other.tensor);
        fieldSetFlags()[2] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing defective_tile instance
     * @param other The existing instance to copy.
     */
    private Builder(schemas.surface_data.defective_tile other) {
            super(schemas.surface_data.defective_tile.SCHEMA$);
      if (isValidValue(fields()[0], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[0].schema(), other.timestamp);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tensor_hash)) {
        this.tensor_hash = data().deepCopy(fields()[1].schema(), other.tensor_hash);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.tensor)) {
        this.tensor = data().deepCopy(fields()[2].schema(), other.tensor);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.CharSequence getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public schemas.surface_data.defective_tile.Builder setTimestamp(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.timestamp = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public schemas.surface_data.defective_tile.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'tensor_hash' field.
      * @return The value.
      */
    public java.lang.CharSequence getTensorHash() {
      return tensor_hash;
    }

    /**
      * Sets the value of the 'tensor_hash' field.
      * @param value The value of 'tensor_hash'.
      * @return This builder.
      */
    public schemas.surface_data.defective_tile.Builder setTensorHash(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.tensor_hash = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'tensor_hash' field has been set.
      * @return True if the 'tensor_hash' field has been set, false otherwise.
      */
    public boolean hasTensorHash() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'tensor_hash' field.
      * @return This builder.
      */
    public schemas.surface_data.defective_tile.Builder clearTensorHash() {
      tensor_hash = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'tensor' field.
      * @return The value.
      */
    public java.util.List<java.util.List<java.util.List<java.lang.Double>>> getTensor() {
      return tensor;
    }

    /**
      * Sets the value of the 'tensor' field.
      * @param value The value of 'tensor'.
      * @return This builder.
      */
    public schemas.surface_data.defective_tile.Builder setTensor(java.util.List<java.util.List<java.util.List<java.lang.Double>>> value) {
      validate(fields()[2], value);
      this.tensor = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'tensor' field has been set.
      * @return True if the 'tensor' field has been set, false otherwise.
      */
    public boolean hasTensor() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'tensor' field.
      * @return This builder.
      */
    public schemas.surface_data.defective_tile.Builder clearTensor() {
      tensor = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public defective_tile build() {
      try {
        defective_tile record = new defective_tile();
        record.timestamp = fieldSetFlags()[0] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.tensor_hash = fieldSetFlags()[1] ? this.tensor_hash : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.tensor = fieldSetFlags()[2] ? this.tensor : (java.util.List<java.util.List<java.util.List<java.lang.Double>>>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
