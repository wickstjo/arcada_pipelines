# CLUSTER SYSTEM BROKERS
cluster:

    # KAFKA MESSAGE QUEUE
    kafka_brokers:
        - localhost:11001
        - localhost:11002

    # CASSANDRA DB
    cassandra_brokers:
        - localhost:12001
        - localhost:12002

    # REDIS CACHE
    redis_broker: localhost:6379

###############################################################################################################
###############################################################################################################

# BACKEND API SETTINGS
backend:

    # WHAT PORT SHOULD THE BACKEND API BE RUNNING ON?
    api_port: 3003

    # HIDE AUXILLARY TABLES AND TOPICS FROM BACKEND LISTINGS?
    # MAKES IT EASIER TO READ/FIND RELEVANT DATA
    hide_auxillary: true

    # WHAT CONTENT SHOULD BE AUTO-CREATED BY THE INIT ENDPOINTS?
    create_on_init:

        # KAFKA TOPICS
        # JUST THE TOPIC NAME IS ENOUGH
        kafka_topics:
            - data_refinery
            - data_dispatch
            - model_training
            - model_inference
            - model_analysis
            - decision_synthesis

        # CASSANDRA KEYSPACES/TABLES
        # PROVIDE A KEYSPACE, TABLE NAME, ITS COLUMNS AND WHAT COLS SHOULD BE USED AS COMPOSITE KEYS
        cassandra_tables:

            # REFINED STOCK DATA TABLE
            -   keyspace: dev
                table_name: refined_stock_data
                columns: 
                    timestamp: int
                    open: float
                    close: float
                    high: float
                    low: float
                    volume: int
                primary_keys:
                    - timestamp

            # ML MODEL HISTORY TABLE
            -   keyspace: dev
                table_name: model_history
                columns:
                    uuid: uuid
                    timestamp: int
                    model_type: text
                    model_name: text
                    model_version: text
                    model_file: text
                    active_status: boolean
                primary_keys:
                    - uuid

###############################################################################################################
###############################################################################################################

# PYTHON PIPELINE SETTINGS
pipeline:

    # HIDE/SHOW LOG STATEMENTS
    verbose_logging: true

    # KAFKA CONSUMER SETTINGS
    kafka:

        # WHEN A CONSUMER IS BOOTED UP..
        # WHAT INDEX SHOULD IT START READING FROM?
        consumer_stategy: latest

        # SHOULD CONSUMERS AUTO COMMIT OR NOT?
        consumer_auto_commit: false
        async_consumer_commit: true

        # HOW SHOULD PRODUCERS ACKNOWLEDGE?
        async_producer_ack: true

    ###############################################################################################################
    ###############################################################################################################

    # STRUCTURE OF INPUT DATA
    pipeline_input:
        structure:
            timestamp: int
            open: float
            close: float
            high: float
            low: float
            volume: int

        # FUTURE TODO:DOES YOUR FEATURES REQUIRE N-ROWS TO COMPUTE?
        # inference_window: 4

    # MACHINE LEARNING STUFF
    create_models:
        -   model_name: my_cool_model
            model_type: lstm
            model_version: 1

        ###############################################################################################################
        ###############################################################################################################

            feature_engineering:
                features:

                    # CREATE NEW COLUMN WITH FEATURE_2
                    -   feature_2:
                            first_column: high
                            second_column: low
                            new_column_name: high_low_relation

                    # CREATE ANOTHER NEW COLUMN WITH FEATURE_2
                    -   feature_2:
                            first_column: open
                            second_column: close
                            new_column_name: open_close_relation

                    # FINALLY, UPDATE THE CLOSE COLUMN WITH FEATURE_1
                    -   feature_1:
                            target_column: close
                            multiply_by: 5

                # AFTER APPLYING ALL FEATURES, WHAT IS THE STRUCTURE OF THE OUTPUT?
                expected_output:
                    timestamp: int
                    open: float
                    close: float
                    high: float
                    low: float
                    volume: int
                    high_low_relation: float
                    open_close_relation: float

        ###############################################################################################################
        ###############################################################################################################

            model_training:
                dataset:
                    db_table: dev.refined_stock_data
                    sort_by: timestamp

                    # SELECT THE FRESHEST N ROWS FROM THE DATABASE
                    # SAME LOGIC APPLIES WHEN RETRAINING
                    num_rows: 5000

                # WHAT TRAIN/TEST/VALIDATION SEGMENTATION RATIO?
                data_segmentation:
                    -   train: 60
                    -   test: 20
                    -   validation: 20

                # LSTM SPECIFIC PARAMS
                training_parameters:
                    layers:
                        - lstm:
                            units: 120
                        - dropout:
                            rate: 0.15
                        - dense:
                            units: 50
                            activation_func: relu
                        - dense:
                            units: 1
                    epochs: 25
                    loss_func: mse
                    optimizer: rmsprop

        ###############################################################################################################
        ###############################################################################################################

            # # VERY MUCH A WORKER PROGRESS STILL
            # model_inference:

            #     # HOW TO DEAL WITH DECISION SYNTHESIS?
            #     # HOW MUCH CONFIDENCE DO WE HAVE IN THE MODELS' PREDICTIONS RELATIVE TO OTHER MODELS?
            #     prediction_weighting: 0.7

            #     # DO YOU WANT TO FORWARD THE PREDICTIONS TO A CUSTOM KAFKA TOPIC?
            #     # FOR EXAMPLE, THE OUTPUT OF ONE MODEL COULD BE THE INPUT FOR ANOTHER
            #     kafka_forward: my_kafka_topic

        ###############################################################################################################
        ###############################################################################################################

            model_analysis:

                # APPLY A QUICK PROBE AFTER INFERENCE
                # TO CHECK IF A DEEPER ANALYSIS IS REQUIRED
                light_probing:
                    probes:
                        -   probe_1:
                                threshold: 0.4
                                artificial_delay: 1

                    # HOW MANY PROBES MUST AGREE TO TRIGGER A DEEPER ANALYSIS?
                    quorum_trigger: 1

                # PERFORM DEEPER ANALYSIS
                # TO TRIGGER MODEL RETRAINING
                deep_probing:
                    probes:
                        -   probe_1:
                                threshold: 0.1
                                artificial_delay: 5
                        -   probe_1:
                                threshold: 0.5
                                artificial_delay: 15

                    # WHAT CUMULATIVE THRESHOLD IS NECESSARY TO TRIGGER MODEL RETRAINING?
                    quorum_trigger: 2

        ###############################################################################################################
        ###############################################################################################################